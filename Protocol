import socket


def receive_protocol(my_socket):
    """
    Handles receiving data from a socket based on a custom protocol. The function
    decodes an operation code (op) and retrieves associated data based on the op value.

    Args:
        my_socket (socket.socket): The socket object to receive data from.

    Returns:
        tuple: Returns a tuple of data corresponding to the operation code:
            - ('00') -> (client_answer, op)
            - ('01') -> (start, end, md5)
            - ('02') -> (start, end) THIS IS FOR WHEN THE CLIENT SENDS ITS RESULTS AFTER THE SEARCH IN HIS RANGE
            - None if the operation code does not match any expected values.

    Raises:
        AssertionError: If the operation code is not valid or expected values aren't
        received correctly.
    """

    # Receive the operation code
    op = my_socket.recv(2).decode()
    assert op in ['00', '01', '02'], f"Invalid operation code received: {op}"

    if op == '00':  # For '00' operation, expect a single data block until '!' is encountered
        # Receiving data until '!' is encountered
        data = b''
        while True:
            temp = my_socket.recv(1)
            assert temp, "Unexpected empty data received."
            if temp == b'!':
                break
            data += temp

        # Decode the complete data
        client_answer = data.decode()

        # Assert that data has been correctly received
        assert client_answer, "No client answer received for operation '00'."

        return client_answer, op

    elif op == '01' or op == '02':  # For '01' and '02', expect ranges and (optionally) MD5 hash
        # Receiving 'start' data until '!' is encountered
        start = b''
        while True:
            temp = my_socket.recv(1)
            assert temp, "Unexpected empty data received for 'start'."
            if temp == b'!':
                break
            start += temp

        # Receiving 'end' data until '!' is encountered
        end = b''
        while True:
            temp = my_socket.recv(1)
            assert temp, "Unexpected empty data received for 'end'."
            if temp == b'!':
                break
            end += temp

        # For operation '01', also receive the MD5 hash
        if op == '01':
            md5 = b''
            while True:
                temp = my_socket.recv(1)
                assert temp, "Unexpected empty data received for 'md5'."
                if temp == b'!':
                    break
                md5 += temp

            # Return start, end, and md5 as strings
            return start.decode(), end.decode(), md5.decode()

        # For operation '02', only return start and end
        return start.decode(), end.decode()

    # Return None if the operation code is invalid or not handled
    return None
